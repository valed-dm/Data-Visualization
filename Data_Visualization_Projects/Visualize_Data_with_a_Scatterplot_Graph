<script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>
<script src="https://d3js.org/d3.v7.min.js"></script>

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Scatterplot Graph</title>
  <style>
    body {
      background-color: MediumOrchid;
    }

    #tooltip {
      position: absolute;
      text-align: left;
      width: auto;
      height: auto;
      padding: 5px;
      font: 8px sans-serif;
      background: DarkSlateGray;
      color: white;
      border: 0px;
      border-radius: 3px;
      pointer-events: none;
      opacity: 0;
    }

    #my_chart {
      display: block;
      width: 736px;
      height: 414px;
      margin: 15vh auto;
      border-radius: 4px;
      background-color: Lavender;
      box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.7);
    }

    .bar:hover {
      fill: DarkSlateGray;
    }
  </style>
</head>

<body>
  <div id="tooltip">test phrase</div>
  <svg id="my_chart">
    <text x="50%" y=30 text-anchor="middle" font-style="italic" font-family="arial" id="title">Doping in Professional Bicycle Racing</text>
    <text x="50%" y=55 text-anchor="middle" font-size="16px" font-style="italic" font-family="arial" id="sub_title">35 Fastest times up Alpe d'Huez</text>
    <text x="50%" y=400 text-anchor="middle" font-size="10px" font-style="italic" font-family="arial" id="text_under_xAxis">REPORTING YEAR</text>
    <text x=12 y=35 font-size="12px" font-style="italic" font-family="arial" id="yAxis_measure_units">finish time</text>
    <text x=0 y=200 font-size="10px" font-style="italic" font-family="arial" transform="rotate(-90 60,200)" id="yAxis_vertical_text">(data given in min:sec format)</text>
    <text x=597 y=158 font-size="8px" font-style="italic" font-family="arial" id="legend">DOPING ALLEGATIONS</text>
    <text x=645 y=178 font-size="8px" font-style="italic" font-family="arial" id="legend_1">CLEAR</text>
    <text x=624 y=198 font-size="8px" font-style="italic" font-family="arial" id="legend_2">SUSPECTED</text>
  </svg>

  <script>
    const W = 736;
    const H = 414;
    const PADDING = 50;
    let pSec = 5; /*this is for Y-axis data adjustment (value given in seconds)*/
    let pYear = 1; /*this is for X-axis data adjustment (value given in years)*/
    let parserTime = d3.timeParse("%M:%S");
    let parserYear = d3.timeParse("%Y");
    let legendCircle = [15, 15];
    document.addEventListener('DOMContentLoaded', function() {
      const req = new XMLHttpRequest();
      req.open("GET", 'https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json', true);
      req.send();
      req.onload = function() {
        let json = JSON.parse(req.responseText);
        /*data for xAxis--------------------------------------------------------*/
        let dataDate = [...json].map((d) => d.Year);
        let minDate = parserYear(d3.min(dataDate) - pYear);
        let maxDate = parserYear(d3.max(dataDate) + pYear);
        /*data for yAxis--------------------------------------------------------*/
        let dataTime = [...json].map((d) => d.Time);
        let minDataTime = (d3.min(dataTime, (d) => d))
          .split(":")
          .map((d, i) => parseInt(d));
        let maxDataTime = (d3.max(dataTime, (d) => d))
          .split(":")
          .map((d, i) => parseInt(d));
        let secMin = (minDataTime[0] * 60 + minDataTime[1] - pSec);
        minDataTime = [(secMin - secMin % 60) / 60, secMin % 60].join(":");
        let secMax = (maxDataTime[0] * 60 + maxDataTime[1] + pSec);
        maxDataTime = [(secMax - secMax % 60) / 60, secMax % 60].join(":");
        /*setting x,y scales-----------------------------------------------------*/
        const xScale = d3.scaleTime()
          .domain([new Date(minDate), new Date(maxDate)])
          .range([PADDING, W - PADDING]);
        const yScale = d3.scaleTime()
          .domain([parserTime(minDataTime), parserTime(maxDataTime)])
          .range([PADDING, H - PADDING, ]);
        /*Scatterplot Graph------------------------------------------------------*/
        const svg = d3.select(document.getElementById("my_chart"))
          .append("svg")
          .style("width", W)
          .style("height", H)
        svg.selectAll("circle")
          .data(json)
          .enter()
          .append("circle")
          .attr("cx", (d) => xScale(parserYear(d.Year)))
          .attr("cy", (d) => yScale(parserTime(d.Time)))
          .attr("r", 6)
          .attr("opacity", .8)
          .attr("fill", (d, i) => d.Doping.length == 0 ? "ForestGreen" : "Red")
          .attr("class", "dot")
          .attr("data-xvalue", (d) => d.Year)
          .attr("data-yvalue", (d) => parserTime(d.Time))
          /*tooltip engine----------------------------------------------------*/
          .on("mouseover", function(event, d) {
            d3.select("#tooltip")
              .style("opacity", .9)
              .html(d.Name + ": " + d.Nationality + "<br/>" + "Year: " + d.Year + ", Time: " + d.Time + "<br/>" + "" + "<br/>" + d.Doping)
              .attr("data-year", d.Year)
          })
          .on('mouseout', function() {
            d3.select("#tooltip").style('opacity', 0)
          })
          .on('mousemove', (event) => {
            var coords = [event.pageX, event.pageY];
            d3.select("#tooltip")
              .style("left", coords[0] + "px")
              .style("top", coords[1] - 85 + "px")
          });
        /*legend creating------------------------------------------------------*/
        svg.selectAll("rect")
          .data(legendCircle)
          .enter()
          .append("circle")
          .attr("cx", 682)
          .attr("cy", (d, i) => 175 + i * 20)
          .attr("r", 6)
          .attr("fill", function(d, i) {
            return i == 0 ? "ForestGreen" : "Red"
          })
        /*axes creating--------------------------------------------------------*/
        const xAxis = d3.axisBottom(xScale);
        svg.append("g")
          .attr("transform", "translate(0," + (H - PADDING) + ")")
          .attr("id", "x-axis")
          .call(xAxis);
        const yAxis = d3.axisLeft(yScale)
          .tickFormat(function(d) {
            return d3.timeFormat("%M:%S")(d)
          });
        svg.append("g")
          .attr("transform", "translate(" + PADDING + ", 0)")
          .attr("id", "y-axis")
          .call(yAxis);
        /*-----------------------------------------------------------------------*/
      };
    });
  </script>
</body>

</html>